CCI Core versión v1.0.0.0-g (32-bit)
Usage:  cci-qt [command-line options]                     

Options:


-?
Print this help message and exit 
-alertnotify=<cmd>
Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message) 
-assumevalid=<hex>
If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: 0000032a62e263c4fa6088832ba239980d1eeaeeb07e00b38f51ec6420d87e80, testnet: 000000397de63df439c4f6d9cfc6a3522375a1a0454f87b0f5b1bb2dae7218b4) 
-blocknotify=<cmd>
Execute command when the best block changes (%s in cmd is replaced by block hash) 
-blockreconstructionextratxn=<n>
Extra transactions to keep in memory for compact block reconstructions (default: 100) 
-blocksdir=<dir>
Specify blocks directory (default: <datadir>/blocks) 
-conf=<file>
Specify configuration file. Relative paths will be prefixed by datadir location. (default: cci.conf) 
-datadir=<dir>
Specify data directory 
-dbcache=<n>
Set database cache size in megabytes (4 to 1024, default: 450) 
-debuglogfile=<file>
Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: debug.log) 
-includeconf=<file>
Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line) 
-loadblock=<file>
Imports blocks from external blk000??.dat file on startup 
-maxmempool=<n>
Keep the transaction memory pool below <n> megabytes (default: 300) 
-maxorphantx=<n>
Keep at most <n> unconnectable transactions in memory (default: 100) 
-mempoolexpiry=<n>
Do not keep transactions in the mempool longer than <n> hours (default: 336) 
-par=<n>
Set the number of script verification threads (-2 to 16, 0 = auto, <0 = leave that many cores free, default: 0) 
-persistmempool
Whether to save the mempool on shutdown and load on restart (default: 1) 
-prune=<n>
Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=550 = automatically prune block files to stay under the specified target size in MiB) 
-reindex
Rebuild chain state and block index from the blk*.dat files on disk 
-reindex-chainstate
Rebuild chain state from the currently indexed blocks 
-txindex
Maintain a full transaction index, used by the getrawtransaction rpc call (default: 0) 
-version
Print version and exit 


Connection options:


-addnode=<ip>
Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes. 
-banscore=<n>
Threshold for disconnecting misbehaving peers (default: 100) 
-bantime=<n>
Number of seconds to keep misbehaving peers from reconnecting (default: 86400) 
-bind=<addr>
Bind to given address and always listen on it. Use [host]:port notation for IPv6 
-connect=<ip>
Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes. 
-discover
Discover own IP addresses (default: 1 when listening and no -externalip or -proxy) 
-dns
Allow DNS lookups for -addnode, -seednode and -connect (default: 1) 
-dnsseed
Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used) 
-enablebip61
Send reject messages per BIP61 (default: 1) 
-externalip=<ip>
Specify your own public address 
-forcednsseed
Always query for peer addresses via DNS lookup (default: 0) 
-listen
Accept connections from outside (default: 1 if no -proxy or -connect) 
-listenonion
Automatically create Tor hidden service (default: 1) 
-maxconnections=<n>
Maintain at most <n> connections to peers (default: 125) 
-maxreceivebuffer=<n>
Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000) 
-maxsendbuffer=<n>
Maximum per-connection send buffer, <n>*1000 bytes (default: 1000) 
-maxtimeadjustment
Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: 4200 seconds) 
-maxuploadtarget=<n>
Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: 0) 
-onion=<ip:port>
Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy) 
-onlynet=<net>
Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. 
-peerbloomfilters
Support filtering of blocks and transaction with bloom filters (default: 1) 
-permitbaremultisig
Relay non-P2SH multisig (default: 1) 
-port=<port>
Listen for connections on <port> (default: 9334 or testnet: 19334) 
-proxy=<ip:port>
Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled) 
-proxyrandomize
Randomize credentials for every proxy connection. This enables Tor stream isolation (default: 1) 
-seednode=<ip>
Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes. 
-timeout=<n>
Specify connection timeout in milliseconds (minimum: 1, default: 5000) 
-torcontrol=<ip>:<port>
Tor control port to use if onion listening enabled (default: 127.0.0.1:9051) 
-torpassword=<pass>
Tor control port password (default: empty) 
-upnp
Use UPnP to map the listening port (default: 0) 
-whitebind=<addr>
Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6 
-whitelist=<IP address or network>
Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times. Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway 


Wallet options:


-addresstype
What type of addresses to use ("legacy", "p2sh-segwit", or "bech32", default: "p2sh-segwit") 
-avoidpartialspends
Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: 0) 
-changetype
What type of change to use ("legacy", "p2sh-segwit", or "bech32"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address) 
-disablewallet
Do not load the wallet and disable wallet RPC calls 
-discardfee=<amt>
The fee rate (in CCI/kB) that indicates your tolerance for discarding change by adding it to the fee (default: 0.0001). Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target 
-fallbackfee=<amt>
A fee rate (in CCI/kB) that will be used when fee estimation has insufficient data (default: 0.0002) 
-keypool=<n>
Set key pool size to <n> (default: 1000) 
-mintxfee=<amt>
Fees (in CCI/kB) smaller than this are considered zero fee for transaction creation (default: 0.00001) 
-paytxfee=<amt>
Fee (in CCI/kB) to add to transactions you send (default: 0.00) 
-rescan
Rescan the block chain for missing wallet transactions on startup 
-salvagewallet
Attempt to recover private keys from a corrupt wallet on startup 
-spendzeroconfchange
Spend unconfirmed change when sending transactions (default: 1) 
-txconfirmtarget=<n>
If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: 6) 
-upgradewallet
Upgrade wallet to latest format on startup 
-wallet=<path>
Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.) 
-walletbroadcast
Make the wallet broadcast transactions (default: 1) 
-walletdir=<dir>
Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>) 
-walletnotify=<cmd>
Execute command when a wallet transaction changes (%s in cmd is replaced by TxID) 
-walletrbf
Send transactions with full-RBF opt-in enabled (RPC only, default: 0) 
-zapwallettxes=<mode>
Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup (1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data) 


ZeroMQ notification options:


-zmqpubhashblock=<address>
Enable publish hash block in <address> 
-zmqpubhashtx=<address>
Enable publish hash transaction in <address> 
-zmqpubrawblock=<address>
Enable publish raw block in <address> 
-zmqpubrawtx=<address>
Enable publish raw transaction in <address> 


Debugging/Testing options:


-debug=<category>
Output debugging information (default: -nodebug, supplying <category> is optional). If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb. 
-debugexclude=<category>
Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories. 
-help-debug
Show all debugging options (usage: --help -help-debug) 
-logips
Include IP addresses in debug output (default: 0) 
-logtimestamps
Prepend debug output with timestamp (default: 1) 
-maxtxfee=<amt>
Maximum total fees (in CCI) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: 0.10) 
-printtoconsole
Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile) 
-shrinkdebugfile
Shrink debug.log file on client startup (default: 1 when no -debug) 
-uacomment=<cmt>
Append comment to the user agent string 


Chain selection options:


-testnet
Use the test chain 


Node relay options:


-bytespersigop
Equivalent bytes per sigop in transactions for relay and mining (default: 20) 
-datacarrier
Relay and mine data carrier transactions (default: 1) 
-datacarriersize
Maximum size of data in data carrier transactions we relay and mine (default: 83) 
-mempoolreplacement
Enable transaction replacement in the memory pool (default: 1) 
-minrelaytxfee=<amt>
Fees (in CCI/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: 0.00001) 
-whitelistforcerelay
Force relay of transactions from whitelisted peers even if they violate local relay policy (default: 1) 
-whitelistrelay
Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: 1) 


Block creation options:


-blockmaxweight=<n>
Set maximum BIP141 block weight (default: 3996000) 
-blockmintxfee=<amt>
Set lowest fee rate (in CCI/kB) for transactions to be included in block creation. (default: 0.00001) 


RPC server options:


-rest
Accept public REST requests (default: 0) 
-rpcallowip=<ip>
Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times 
-rpcauth=<userpw>
Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times 
-rpcbind=<addr>[:port]
Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses) 
-rpccookiefile=<loc>
Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir) 
-rpcpassword=<pw>
Password for JSON-RPC connections 
-rpcport=<port>
Listen for JSON-RPC connections on <port> (default: 9333 or testnet: 19333) 
-rpcserialversion
Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: 1) 
-rpcthreads=<n>
Set the number of threads to service RPC calls (default: 4) 
-rpcuser=<user>
Username for JSON-RPC connections 
-server
Accept command line and JSON-RPC commands 


UI Options:


-choosedatadir
Choose data directory on startup (default: 0) 
-lang=<lang>
Set language, for example "de_DE" (default: system locale) 
-min
Start minimized 
-resetguisettings
Reset all settings changed in the GUI 
-rootcertificates=<file>
Set SSL root certificates for payment request (default: -system-) 
-splash
Show splash screen on startup (default: 1) 
